/// Format description module
module gfx.graal.format;

// module generated by formatgen.py

/// numeric format of texel channels
enum NumFormat
{
    uNorm,
    sNorm,
    uScaled,
    sScaled,
    uInt,
    sInt,
    uFloat,
    sFloat,
    sRgb,
}

/// description of a format
struct FormatDesc
{
    SurfaceType surfaceType;
    NumFormat numFormat;
    bool packed;
}

/// get the description of a format
FormatDesc formatDesc(in Format fmt) pure {
    return fmtDescs[cast(uint)fmt];
}

/// Format properties
struct FormatProperties {
    FormatFeatures linearTiling;
    FormatFeatures optimalTiling;
    FormatFeatures buffer;
}

/// Format features
enum FormatFeatures {
    sampledImage                = 0x0001,
    storageImage                = 0x0002,
    storageImageAtomic          = 0x0004,
    uniformTexelBuffer          = 0x0008,
    storageTexelBuffer          = 0x0010,
    storageTexelBufferAtomic    = 0x0020,
    vertexBuffer                = 0x0040,
    colorAttachment             = 0x0080,
    colorAttachmentBlend        = 0x0100,
    depthStencilAttachment      = 0x0200,
    blitSrc                     = 0x0400,
    blitDst                     = 0x0800,
    sampledImageFilterLinear    = 0x1000,

    framebuffer                 = 0x0380,
    blit                        = 0x0c00,
}


/// Describes the components of a surface
enum SurfaceType {
    R4_G4,
    R4_G4_B4_A4,
    B4_G4_R4_A4,
    R5_G6_B5,
    B5_G6_R5,
    R5_G5_B5_A1,
    B5_G5_R5_A1,
    A1_R5_G5_B5,
    R8,
    R8_G8,
    R8_G8_B8,
    B8_G8_R8,
    R8_G8_B8_A8,
    B8_G8_R8_A8,
    A8_B8_G8_R8,
    A2_R10_G10_B10,
    A2_B10_G10_R10,
    R16,
    R16_G16,
    R16_G16_B16,
    R16_G16_B16_A16,
    R32,
    R32_G32,
    R32_G32_B32,
    R32_G32_B32_A32,
    R64,
    R64_G64,
    R64_G64_B64,
    R64_G64_B64_A64,
    B10_G11_R11,
    E5_B9_G9_R9,
    D16,
    X8_D24,
    D32,
    S8,
    D16_S8,
    D24_S8,
    D32_S8,
}

/// The format of an Image.
enum Format
{
    undefined = 0,
    rg4_uNorm = 1,
    rgba4_uNorm = 2,
    bgra4_uNorm = 3,
    r5g6b5_uNorm = 4,
    b5g6r5_uNorm = 5,
    r5g5b5a1_uNorm = 6,
    b5g5r5a1_uNorm = 7,
    a1r5g5b5_uNorm = 8,
    r8_uNorm = 9,
    r8_sNorm = 10,
    r8_uScaled = 11,
    r8_sScaled = 12,
    r8_uInt = 13,
    r8_sInt = 14,
    r8_sRgb = 15,
    rg8_uNorm = 16,
    rg8_sNorm = 17,
    rg8_uScaled = 18,
    rg8_sScaled = 19,
    rg8_uInt = 20,
    rg8_sInt = 21,
    rg8_sRgb = 22,
    rgb8_uNorm = 23,
    rgb8_sNorm = 24,
    rgb8_uScaled = 25,
    rgb8_sScaled = 26,
    rgb8_uInt = 27,
    rgb8_sInt = 28,
    rgb8_sRgb = 29,
    bgr8_uNorm = 30,
    bgr8_sNorm = 31,
    bgr8_uScaled = 32,
    bgr8_sScaled = 33,
    bgr8_uInt = 34,
    bgr8_sInt = 35,
    bgr8_sRgb = 36,
    rgba8_uNorm = 37,
    rgba8_sNorm = 38,
    rgba8_uScaled = 39,
    rgba8_sScaled = 40,
    rgba8_uInt = 41,
    rgba8_sInt = 42,
    rgba8_sRgb = 43,
    bgra8_uNorm = 44,
    bgra8_sNorm = 45,
    bgra8_uScaled = 46,
    bgra8_sScaled = 47,
    bgra8_uInt = 48,
    bgra8_sInt = 49,
    bgra8_sRgb = 50,
    abgr8_uNorm = 51,
    abgr8_sNorm = 52,
    abgr8_uScaled = 53,
    abgr8_sScaled = 54,
    abgr8_uInt = 55,
    abgr8_sInt = 56,
    abgr8_sRgb = 57,
    a2r10g10b10_uNorm = 58,
    a2r10g10b10_sNorm = 59,
    a2r10g10b10_uScaled = 60,
    a2r10g10b10_sScaled = 61,
    a2r10g10b10_uInt = 62,
    a2r10g10b10_sInt = 63,
    a2b10g10r10_uNorm = 64,
    a2b10g10r10_sNorm = 65,
    a2b10g10r10_uScaled = 66,
    a2b10g10r10_sScaled = 67,
    a2b10g10r10_uInt = 68,
    a2b10g10r10_sInt = 69,
    r16_uNorm = 70,
    r16_sNorm = 71,
    r16_uScaled = 72,
    r16_sScaled = 73,
    r16_uInt = 74,
    r16_sInt = 75,
    r16_sFloat = 76,
    rg16_uNorm = 77,
    rg16_sNorm = 78,
    rg16_uScaled = 79,
    rg16_sScaled = 80,
    rg16_uInt = 81,
    rg16_sInt = 82,
    rg16_sFloat = 83,
    rgb16_uNorm = 84,
    rgb16_sNorm = 85,
    rgb16_uScaled = 86,
    rgb16_sScaled = 87,
    rgb16_uInt = 88,
    rgb16_sInt = 89,
    rgb16_sFloat = 90,
    rgba16_uNorm = 91,
    rgba16_sNorm = 92,
    rgba16_uScaled = 93,
    rgba16_sScaled = 94,
    rgba16_uInt = 95,
    rgba16_sInt = 96,
    rgba16_sFloat = 97,
    r32_uInt = 98,
    r32_sInt = 99,
    r32_sFloat = 100,
    rg32_uInt = 101,
    rg32_sInt = 102,
    rg32_sFloat = 103,
    rgb32_uInt = 104,
    rgb32_sInt = 105,
    rgb32_sFloat = 106,
    rgba32_uInt = 107,
    rgba32_sInt = 108,
    rgba32_sFloat = 109,
    r64_uInt = 110,
    r64_sInt = 111,
    r64_sFloat = 112,
    rg64_uInt = 113,
    rg64_sInt = 114,
    rg64_sFloat = 115,
    rgb64_uInt = 116,
    rgb64_sInt = 117,
    rgb64_sFloat = 118,
    rgba64_uInt = 119,
    rgba64_sInt = 120,
    rgba64_sFloat = 121,
    b10g11r11_uFloat = 122,
    ebgr9_uFloat = 123,
    d16_uNorm = 124,
    x8d24_uNorm = 125,
    d32_sFloat = 126,
    s8_uInt = 127,
    d16s8_uNorm = 128,
    d24s8_uNorm = 129,
    d32s8_sFloat = 130,
}

/// Get the totalBits of an image surface
@property uint totalBits (in SurfaceType st) pure
{
    switch(st) {
    case SurfaceType.R4_G4: return 8;
    case SurfaceType.R4_G4_B4_A4: return 16;
    case SurfaceType.B4_G4_R4_A4: return 16;
    case SurfaceType.R5_G6_B5: return 16;
    case SurfaceType.B5_G6_R5: return 16;
    case SurfaceType.R5_G5_B5_A1: return 16;
    case SurfaceType.B5_G5_R5_A1: return 16;
    case SurfaceType.A1_R5_G5_B5: return 16;
    case SurfaceType.R8: return 8;
    case SurfaceType.R8_G8: return 16;
    case SurfaceType.R8_G8_B8: return 24;
    case SurfaceType.B8_G8_R8: return 24;
    case SurfaceType.R8_G8_B8_A8: return 32;
    case SurfaceType.B8_G8_R8_A8: return 32;
    case SurfaceType.A8_B8_G8_R8: return 32;
    case SurfaceType.A2_R10_G10_B10: return 32;
    case SurfaceType.A2_B10_G10_R10: return 32;
    case SurfaceType.R16: return 16;
    case SurfaceType.R16_G16: return 32;
    case SurfaceType.R16_G16_B16: return 48;
    case SurfaceType.R16_G16_B16_A16: return 64;
    case SurfaceType.R32: return 32;
    case SurfaceType.R32_G32: return 64;
    case SurfaceType.R32_G32_B32: return 96;
    case SurfaceType.R32_G32_B32_A32: return 128;
    case SurfaceType.R64: return 64;
    case SurfaceType.R64_G64: return 128;
    case SurfaceType.R64_G64_B64: return 192;
    case SurfaceType.R64_G64_B64_A64: return 256;
    case SurfaceType.B10_G11_R11: return 32;
    case SurfaceType.E5_B9_G9_R9: return 32;
    case SurfaceType.D16: return 16;
    case SurfaceType.X8_D24: return 32;
    case SurfaceType.D32: return 32;
    case SurfaceType.S8: return 8;
    case SurfaceType.D16_S8: return 24;
    case SurfaceType.D24_S8: return 32;
    case SurfaceType.D32_S8: return 40;
    default: return 0;
    }
}

/// Get the totalBits of a format
@property uint totalBits (in Format format) pure
{
    return formatDesc(format).surfaceType.totalBits;
}

/// Get the numComponents of an image surface
@property uint numComponents (in SurfaceType st) pure
{
    switch(st) {
    case SurfaceType.R4_G4: return 2;
    case SurfaceType.R4_G4_B4_A4: return 4;
    case SurfaceType.B4_G4_R4_A4: return 4;
    case SurfaceType.R5_G6_B5: return 3;
    case SurfaceType.B5_G6_R5: return 3;
    case SurfaceType.R5_G5_B5_A1: return 4;
    case SurfaceType.B5_G5_R5_A1: return 4;
    case SurfaceType.A1_R5_G5_B5: return 4;
    case SurfaceType.R8: return 1;
    case SurfaceType.R8_G8: return 2;
    case SurfaceType.R8_G8_B8: return 3;
    case SurfaceType.B8_G8_R8: return 3;
    case SurfaceType.R8_G8_B8_A8: return 4;
    case SurfaceType.B8_G8_R8_A8: return 4;
    case SurfaceType.A8_B8_G8_R8: return 4;
    case SurfaceType.A2_R10_G10_B10: return 4;
    case SurfaceType.A2_B10_G10_R10: return 4;
    case SurfaceType.R16: return 1;
    case SurfaceType.R16_G16: return 2;
    case SurfaceType.R16_G16_B16: return 3;
    case SurfaceType.R16_G16_B16_A16: return 4;
    case SurfaceType.R32: return 1;
    case SurfaceType.R32_G32: return 2;
    case SurfaceType.R32_G32_B32: return 3;
    case SurfaceType.R32_G32_B32_A32: return 4;
    case SurfaceType.R64: return 1;
    case SurfaceType.R64_G64: return 2;
    case SurfaceType.R64_G64_B64: return 3;
    case SurfaceType.R64_G64_B64_A64: return 4;
    case SurfaceType.B10_G11_R11: return 3;
    case SurfaceType.E5_B9_G9_R9: return 4;
    case SurfaceType.D16: return 1;
    case SurfaceType.X8_D24: return 2;
    case SurfaceType.D32: return 1;
    case SurfaceType.S8: return 1;
    case SurfaceType.D16_S8: return 2;
    case SurfaceType.D24_S8: return 2;
    case SurfaceType.D32_S8: return 2;
    default: return 0;
    }
}

/// Get the numComponents of a format
@property uint numComponents (in Format format) pure
{
    return formatDesc(format).surfaceType.numComponents;
}

/// Get the colorBits of an image surface
@property uint colorBits (in SurfaceType st) pure
{
    switch(st) {
    case SurfaceType.R4_G4: return 8;
    case SurfaceType.R4_G4_B4_A4: return 16;
    case SurfaceType.B4_G4_R4_A4: return 16;
    case SurfaceType.R5_G6_B5: return 16;
    case SurfaceType.B5_G6_R5: return 16;
    case SurfaceType.R5_G5_B5_A1: return 16;
    case SurfaceType.B5_G5_R5_A1: return 16;
    case SurfaceType.A1_R5_G5_B5: return 16;
    case SurfaceType.R8: return 8;
    case SurfaceType.R8_G8: return 16;
    case SurfaceType.R8_G8_B8: return 24;
    case SurfaceType.B8_G8_R8: return 24;
    case SurfaceType.R8_G8_B8_A8: return 32;
    case SurfaceType.B8_G8_R8_A8: return 32;
    case SurfaceType.A8_B8_G8_R8: return 32;
    case SurfaceType.A2_R10_G10_B10: return 32;
    case SurfaceType.A2_B10_G10_R10: return 32;
    case SurfaceType.R16: return 16;
    case SurfaceType.R16_G16: return 32;
    case SurfaceType.R16_G16_B16: return 48;
    case SurfaceType.R16_G16_B16_A16: return 64;
    case SurfaceType.R32: return 32;
    case SurfaceType.R32_G32: return 64;
    case SurfaceType.R32_G32_B32: return 96;
    case SurfaceType.R32_G32_B32_A32: return 128;
    case SurfaceType.R64: return 64;
    case SurfaceType.R64_G64: return 128;
    case SurfaceType.R64_G64_B64: return 192;
    case SurfaceType.R64_G64_B64_A64: return 256;
    case SurfaceType.B10_G11_R11: return 32;
    case SurfaceType.E5_B9_G9_R9: return 32;
    default: return 0;
    }
}

/// Get the colorBits of a format
@property uint colorBits (in Format format) pure
{
    return formatDesc(format).surfaceType.colorBits;
}

/// Get the redBits of an image surface
@property uint redBits (in SurfaceType st) pure
{
    switch(st) {
    case SurfaceType.R4_G4: return 4;
    case SurfaceType.R4_G4_B4_A4: return 4;
    case SurfaceType.B4_G4_R4_A4: return 4;
    case SurfaceType.R5_G6_B5: return 5;
    case SurfaceType.B5_G6_R5: return 5;
    case SurfaceType.R5_G5_B5_A1: return 5;
    case SurfaceType.B5_G5_R5_A1: return 5;
    case SurfaceType.A1_R5_G5_B5: return 5;
    case SurfaceType.R8: return 8;
    case SurfaceType.R8_G8: return 8;
    case SurfaceType.R8_G8_B8: return 8;
    case SurfaceType.B8_G8_R8: return 8;
    case SurfaceType.R8_G8_B8_A8: return 8;
    case SurfaceType.B8_G8_R8_A8: return 8;
    case SurfaceType.A8_B8_G8_R8: return 8;
    case SurfaceType.A2_R10_G10_B10: return 10;
    case SurfaceType.A2_B10_G10_R10: return 10;
    case SurfaceType.R16: return 16;
    case SurfaceType.R16_G16: return 16;
    case SurfaceType.R16_G16_B16: return 16;
    case SurfaceType.R16_G16_B16_A16: return 16;
    case SurfaceType.R32: return 32;
    case SurfaceType.R32_G32: return 32;
    case SurfaceType.R32_G32_B32: return 32;
    case SurfaceType.R32_G32_B32_A32: return 32;
    case SurfaceType.R64: return 64;
    case SurfaceType.R64_G64: return 64;
    case SurfaceType.R64_G64_B64: return 64;
    case SurfaceType.R64_G64_B64_A64: return 64;
    case SurfaceType.B10_G11_R11: return 11;
    case SurfaceType.E5_B9_G9_R9: return 9;
    default: return 0;
    }
}

/// Get the redBits of a format
@property uint redBits (in Format format) pure
{
    return formatDesc(format).surfaceType.redBits;
}

/// Get the greenBits of an image surface
@property uint greenBits (in SurfaceType st) pure
{
    switch(st) {
    case SurfaceType.R4_G4: return 4;
    case SurfaceType.R4_G4_B4_A4: return 4;
    case SurfaceType.B4_G4_R4_A4: return 4;
    case SurfaceType.R5_G6_B5: return 6;
    case SurfaceType.B5_G6_R5: return 6;
    case SurfaceType.R5_G5_B5_A1: return 5;
    case SurfaceType.B5_G5_R5_A1: return 5;
    case SurfaceType.A1_R5_G5_B5: return 5;
    case SurfaceType.R8_G8: return 8;
    case SurfaceType.R8_G8_B8: return 8;
    case SurfaceType.B8_G8_R8: return 8;
    case SurfaceType.R8_G8_B8_A8: return 8;
    case SurfaceType.B8_G8_R8_A8: return 8;
    case SurfaceType.A8_B8_G8_R8: return 8;
    case SurfaceType.A2_R10_G10_B10: return 10;
    case SurfaceType.A2_B10_G10_R10: return 10;
    case SurfaceType.R16_G16: return 16;
    case SurfaceType.R16_G16_B16: return 16;
    case SurfaceType.R16_G16_B16_A16: return 16;
    case SurfaceType.R32_G32: return 32;
    case SurfaceType.R32_G32_B32: return 32;
    case SurfaceType.R32_G32_B32_A32: return 32;
    case SurfaceType.R64_G64: return 64;
    case SurfaceType.R64_G64_B64: return 64;
    case SurfaceType.R64_G64_B64_A64: return 64;
    case SurfaceType.B10_G11_R11: return 11;
    case SurfaceType.E5_B9_G9_R9: return 9;
    default: return 0;
    }
}

/// Get the greenBits of a format
@property uint greenBits (in Format format) pure
{
    return formatDesc(format).surfaceType.greenBits;
}

/// Get the blueBits of an image surface
@property uint blueBits (in SurfaceType st) pure
{
    switch(st) {
    case SurfaceType.R4_G4_B4_A4: return 4;
    case SurfaceType.B4_G4_R4_A4: return 4;
    case SurfaceType.R5_G6_B5: return 5;
    case SurfaceType.B5_G6_R5: return 5;
    case SurfaceType.R5_G5_B5_A1: return 5;
    case SurfaceType.B5_G5_R5_A1: return 5;
    case SurfaceType.A1_R5_G5_B5: return 5;
    case SurfaceType.R8_G8_B8: return 8;
    case SurfaceType.B8_G8_R8: return 8;
    case SurfaceType.R8_G8_B8_A8: return 8;
    case SurfaceType.B8_G8_R8_A8: return 8;
    case SurfaceType.A8_B8_G8_R8: return 8;
    case SurfaceType.A2_R10_G10_B10: return 10;
    case SurfaceType.A2_B10_G10_R10: return 10;
    case SurfaceType.R16_G16_B16: return 16;
    case SurfaceType.R16_G16_B16_A16: return 16;
    case SurfaceType.R32_G32_B32: return 32;
    case SurfaceType.R32_G32_B32_A32: return 32;
    case SurfaceType.R64_G64_B64: return 64;
    case SurfaceType.R64_G64_B64_A64: return 64;
    case SurfaceType.B10_G11_R11: return 10;
    case SurfaceType.E5_B9_G9_R9: return 9;
    default: return 0;
    }
}

/// Get the blueBits of a format
@property uint blueBits (in Format format) pure
{
    return formatDesc(format).surfaceType.blueBits;
}

/// Get the alphaBits of an image surface
@property uint alphaBits (in SurfaceType st) pure
{
    switch(st) {
    case SurfaceType.R4_G4_B4_A4: return 4;
    case SurfaceType.B4_G4_R4_A4: return 4;
    case SurfaceType.R5_G5_B5_A1: return 1;
    case SurfaceType.B5_G5_R5_A1: return 1;
    case SurfaceType.A1_R5_G5_B5: return 1;
    case SurfaceType.R8_G8_B8_A8: return 8;
    case SurfaceType.B8_G8_R8_A8: return 8;
    case SurfaceType.A8_B8_G8_R8: return 8;
    case SurfaceType.A2_R10_G10_B10: return 2;
    case SurfaceType.A2_B10_G10_R10: return 2;
    case SurfaceType.R16_G16_B16_A16: return 16;
    case SurfaceType.R32_G32_B32_A32: return 32;
    case SurfaceType.R64_G64_B64_A64: return 64;
    default: return 0;
    }
}

/// Get the alphaBits of a format
@property uint alphaBits (in Format format) pure
{
    return formatDesc(format).surfaceType.alphaBits;
}

/// Get the redShift of an image surface
@property uint redShift (in SurfaceType st) pure
{
    switch(st) {
    case SurfaceType.R4_G4: return 4;
    case SurfaceType.R4_G4_B4_A4: return 12;
    case SurfaceType.B4_G4_R4_A4: return 4;
    case SurfaceType.R5_G6_B5: return 11;
    case SurfaceType.R5_G5_B5_A1: return 11;
    case SurfaceType.B5_G5_R5_A1: return 1;
    case SurfaceType.A1_R5_G5_B5: return 10;
    case SurfaceType.R8_G8: return 8;
    case SurfaceType.R8_G8_B8: return 16;
    case SurfaceType.R8_G8_B8_A8: return 24;
    case SurfaceType.B8_G8_R8_A8: return 8;
    case SurfaceType.A2_R10_G10_B10: return 20;
    case SurfaceType.R16_G16: return 16;
    case SurfaceType.R16_G16_B16: return 32;
    case SurfaceType.R16_G16_B16_A16: return 48;
    case SurfaceType.R32_G32: return 32;
    case SurfaceType.R32_G32_B32: return 64;
    case SurfaceType.R32_G32_B32_A32: return 96;
    case SurfaceType.R64_G64: return 64;
    case SurfaceType.R64_G64_B64: return 128;
    case SurfaceType.R64_G64_B64_A64: return 192;
    default: return 0;
    }
}

/// Get the redShift of a format
@property uint redShift (in Format format) pure
{
    return formatDesc(format).surfaceType.redShift;
}

/// Get the greenShift of an image surface
@property uint greenShift (in SurfaceType st) pure
{
    switch(st) {
    case SurfaceType.R4_G4_B4_A4: return 8;
    case SurfaceType.B4_G4_R4_A4: return 8;
    case SurfaceType.R5_G6_B5: return 5;
    case SurfaceType.B5_G6_R5: return 5;
    case SurfaceType.R5_G5_B5_A1: return 6;
    case SurfaceType.B5_G5_R5_A1: return 6;
    case SurfaceType.A1_R5_G5_B5: return 5;
    case SurfaceType.R8_G8_B8: return 8;
    case SurfaceType.B8_G8_R8: return 8;
    case SurfaceType.R8_G8_B8_A8: return 16;
    case SurfaceType.B8_G8_R8_A8: return 16;
    case SurfaceType.A8_B8_G8_R8: return 8;
    case SurfaceType.A2_R10_G10_B10: return 10;
    case SurfaceType.A2_B10_G10_R10: return 10;
    case SurfaceType.R16_G16_B16: return 16;
    case SurfaceType.R16_G16_B16_A16: return 32;
    case SurfaceType.R32_G32_B32: return 32;
    case SurfaceType.R32_G32_B32_A32: return 64;
    case SurfaceType.R64_G64_B64: return 64;
    case SurfaceType.R64_G64_B64_A64: return 128;
    case SurfaceType.B10_G11_R11: return 11;
    case SurfaceType.E5_B9_G9_R9: return 9;
    default: return 0;
    }
}

/// Get the greenShift of a format
@property uint greenShift (in Format format) pure
{
    return formatDesc(format).surfaceType.greenShift;
}

/// Get the blueShift of an image surface
@property uint blueShift (in SurfaceType st) pure
{
    switch(st) {
    case SurfaceType.R4_G4_B4_A4: return 4;
    case SurfaceType.B4_G4_R4_A4: return 12;
    case SurfaceType.B5_G6_R5: return 11;
    case SurfaceType.R5_G5_B5_A1: return 1;
    case SurfaceType.B5_G5_R5_A1: return 11;
    case SurfaceType.B8_G8_R8: return 16;
    case SurfaceType.R8_G8_B8_A8: return 8;
    case SurfaceType.B8_G8_R8_A8: return 24;
    case SurfaceType.A8_B8_G8_R8: return 16;
    case SurfaceType.A2_B10_G10_R10: return 20;
    case SurfaceType.R16_G16_B16_A16: return 16;
    case SurfaceType.R32_G32_B32_A32: return 32;
    case SurfaceType.R64_G64_B64_A64: return 64;
    case SurfaceType.B10_G11_R11: return 22;
    case SurfaceType.E5_B9_G9_R9: return 18;
    default: return 0;
    }
}

/// Get the blueShift of a format
@property uint blueShift (in Format format) pure
{
    return formatDesc(format).surfaceType.blueShift;
}

/// Get the alphaShift of an image surface
@property uint alphaShift (in SurfaceType st) pure
{
    switch(st) {
    case SurfaceType.A1_R5_G5_B5: return 15;
    case SurfaceType.A8_B8_G8_R8: return 24;
    case SurfaceType.A2_R10_G10_B10: return 30;
    case SurfaceType.A2_B10_G10_R10: return 30;
    default: return 0;
    }
}

/// Get the alphaShift of a format
@property uint alphaShift (in Format format) pure
{
    return formatDesc(format).surfaceType.alphaShift;
}

/// Get the sharedExpBits of an image surface
@property uint sharedExpBits (in SurfaceType st) pure
{
    switch(st) {
    case SurfaceType.E5_B9_G9_R9: return 5;
    default: return 0;
    }
}

/// Get the sharedExpBits of a format
@property uint sharedExpBits (in Format format) pure
{
    return formatDesc(format).surfaceType.sharedExpBits;
}

/// Get the depthBits of an image surface
@property uint depthBits (in SurfaceType st) pure
{
    switch(st) {
    case SurfaceType.D16: return 16;
    case SurfaceType.X8_D24: return 24;
    case SurfaceType.D32: return 32;
    case SurfaceType.D16_S8: return 16;
    case SurfaceType.D24_S8: return 24;
    case SurfaceType.D32_S8: return 32;
    default: return 0;
    }
}

/// Get the depthBits of a format
@property uint depthBits (in Format format) pure
{
    return formatDesc(format).surfaceType.depthBits;
}

/// Get the stencilBits of an image surface
@property uint stencilBits (in SurfaceType st) pure
{
    switch(st) {
    case SurfaceType.S8: return 8;
    case SurfaceType.D16_S8: return 8;
    case SurfaceType.D24_S8: return 8;
    case SurfaceType.D32_S8: return 8;
    default: return 0;
    }
}

/// Get the stencilBits of a format
@property uint stencilBits (in Format format) pure
{
    return formatDesc(format).surfaceType.stencilBits;
}

/// Static descriptor of SurfaceType.R4_G4.
struct R4_G4
{
    enum totalBits = 8;
    enum numComponents = 2;
    enum redBits = 4;
    enum greenBits = 4;
    enum blueBits = 0;
    enum alphaBits = 0;
    enum sharedExpBits = 0;
    enum depthBits = 0;
    enum stencilBits = 0;

    import std.meta : AliasSeq;
    alias numFormats = AliasSeq!(
        NumFormat.uNorm
    );
}

/// Static descriptor of SurfaceType.R4_G4_B4_A4.
struct R4_G4_B4_A4
{
    enum totalBits = 16;
    enum numComponents = 4;
    enum redBits = 4;
    enum greenBits = 4;
    enum blueBits = 4;
    enum alphaBits = 4;
    enum sharedExpBits = 0;
    enum depthBits = 0;
    enum stencilBits = 0;

    import std.meta : AliasSeq;
    alias numFormats = AliasSeq!(
        NumFormat.uNorm
    );
}

/// Static descriptor of SurfaceType.B4_G4_R4_A4.
struct B4_G4_R4_A4
{
    enum totalBits = 16;
    enum numComponents = 4;
    enum redBits = 4;
    enum greenBits = 4;
    enum blueBits = 4;
    enum alphaBits = 4;
    enum sharedExpBits = 0;
    enum depthBits = 0;
    enum stencilBits = 0;

    import std.meta : AliasSeq;
    alias numFormats = AliasSeq!(
        NumFormat.uNorm
    );
}

/// Static descriptor of SurfaceType.R5_G6_B5.
struct R5_G6_B5
{
    enum totalBits = 16;
    enum numComponents = 3;
    enum redBits = 5;
    enum greenBits = 6;
    enum blueBits = 5;
    enum alphaBits = 0;
    enum sharedExpBits = 0;
    enum depthBits = 0;
    enum stencilBits = 0;

    import std.meta : AliasSeq;
    alias numFormats = AliasSeq!(
        NumFormat.uNorm
    );
}

/// Static descriptor of SurfaceType.B5_G6_R5.
struct B5_G6_R5
{
    enum totalBits = 16;
    enum numComponents = 3;
    enum redBits = 5;
    enum greenBits = 6;
    enum blueBits = 5;
    enum alphaBits = 0;
    enum sharedExpBits = 0;
    enum depthBits = 0;
    enum stencilBits = 0;

    import std.meta : AliasSeq;
    alias numFormats = AliasSeq!(
        NumFormat.uNorm
    );
}

/// Static descriptor of SurfaceType.R5_G5_B5_A1.
struct R5_G5_B5_A1
{
    enum totalBits = 16;
    enum numComponents = 4;
    enum redBits = 5;
    enum greenBits = 5;
    enum blueBits = 5;
    enum alphaBits = 1;
    enum sharedExpBits = 0;
    enum depthBits = 0;
    enum stencilBits = 0;

    import std.meta : AliasSeq;
    alias numFormats = AliasSeq!(
        NumFormat.uNorm
    );
}

/// Static descriptor of SurfaceType.B5_G5_R5_A1.
struct B5_G5_R5_A1
{
    enum totalBits = 16;
    enum numComponents = 4;
    enum redBits = 5;
    enum greenBits = 5;
    enum blueBits = 5;
    enum alphaBits = 1;
    enum sharedExpBits = 0;
    enum depthBits = 0;
    enum stencilBits = 0;

    import std.meta : AliasSeq;
    alias numFormats = AliasSeq!(
        NumFormat.uNorm
    );
}

/// Static descriptor of SurfaceType.A1_R5_G5_B5.
struct A1_R5_G5_B5
{
    enum totalBits = 16;
    enum numComponents = 4;
    enum redBits = 5;
    enum greenBits = 5;
    enum blueBits = 5;
    enum alphaBits = 1;
    enum sharedExpBits = 0;
    enum depthBits = 0;
    enum stencilBits = 0;

    import std.meta : AliasSeq;
    alias numFormats = AliasSeq!(
        NumFormat.uNorm
    );
}

/// Static descriptor of SurfaceType.R8.
struct R8
{
    enum totalBits = 8;
    enum numComponents = 1;
    enum redBits = 8;
    enum greenBits = 0;
    enum blueBits = 0;
    enum alphaBits = 0;
    enum sharedExpBits = 0;
    enum depthBits = 0;
    enum stencilBits = 0;

    import std.meta : AliasSeq;
    alias numFormats = AliasSeq!(
        NumFormat.uNorm, NumFormat.sNorm, NumFormat.uScaled, NumFormat.sScaled, NumFormat.uInt, NumFormat.sInt, NumFormat.sRgb
    );
}

/// Static descriptor of SurfaceType.R8_G8.
struct R8_G8
{
    enum totalBits = 16;
    enum numComponents = 2;
    enum redBits = 8;
    enum greenBits = 8;
    enum blueBits = 0;
    enum alphaBits = 0;
    enum sharedExpBits = 0;
    enum depthBits = 0;
    enum stencilBits = 0;

    import std.meta : AliasSeq;
    alias numFormats = AliasSeq!(
        NumFormat.uNorm, NumFormat.sNorm, NumFormat.uScaled, NumFormat.sScaled, NumFormat.uInt, NumFormat.sInt, NumFormat.sRgb
    );
}

/// Static descriptor of SurfaceType.R8_G8_B8.
struct R8_G8_B8
{
    enum totalBits = 24;
    enum numComponents = 3;
    enum redBits = 8;
    enum greenBits = 8;
    enum blueBits = 8;
    enum alphaBits = 0;
    enum sharedExpBits = 0;
    enum depthBits = 0;
    enum stencilBits = 0;

    import std.meta : AliasSeq;
    alias numFormats = AliasSeq!(
        NumFormat.uNorm, NumFormat.sNorm, NumFormat.uScaled, NumFormat.sScaled, NumFormat.uInt, NumFormat.sInt, NumFormat.sRgb
    );
}

/// Static descriptor of SurfaceType.B8_G8_R8.
struct B8_G8_R8
{
    enum totalBits = 24;
    enum numComponents = 3;
    enum redBits = 8;
    enum greenBits = 8;
    enum blueBits = 8;
    enum alphaBits = 0;
    enum sharedExpBits = 0;
    enum depthBits = 0;
    enum stencilBits = 0;

    import std.meta : AliasSeq;
    alias numFormats = AliasSeq!(
        NumFormat.uNorm, NumFormat.sNorm, NumFormat.uScaled, NumFormat.sScaled, NumFormat.uInt, NumFormat.sInt, NumFormat.sRgb
    );
}

/// Static descriptor of SurfaceType.R8_G8_B8_A8.
struct R8_G8_B8_A8
{
    enum totalBits = 32;
    enum numComponents = 4;
    enum redBits = 8;
    enum greenBits = 8;
    enum blueBits = 8;
    enum alphaBits = 8;
    enum sharedExpBits = 0;
    enum depthBits = 0;
    enum stencilBits = 0;

    import std.meta : AliasSeq;
    alias numFormats = AliasSeq!(
        NumFormat.uNorm, NumFormat.sNorm, NumFormat.uScaled, NumFormat.sScaled, NumFormat.uInt, NumFormat.sInt, NumFormat.sRgb
    );
}

/// Static descriptor of SurfaceType.B8_G8_R8_A8.
struct B8_G8_R8_A8
{
    enum totalBits = 32;
    enum numComponents = 4;
    enum redBits = 8;
    enum greenBits = 8;
    enum blueBits = 8;
    enum alphaBits = 8;
    enum sharedExpBits = 0;
    enum depthBits = 0;
    enum stencilBits = 0;

    import std.meta : AliasSeq;
    alias numFormats = AliasSeq!(
        NumFormat.uNorm, NumFormat.sNorm, NumFormat.uScaled, NumFormat.sScaled, NumFormat.uInt, NumFormat.sInt, NumFormat.sRgb
    );
}

/// Static descriptor of SurfaceType.A8_B8_G8_R8.
struct A8_B8_G8_R8
{
    enum totalBits = 32;
    enum numComponents = 4;
    enum redBits = 8;
    enum greenBits = 8;
    enum blueBits = 8;
    enum alphaBits = 8;
    enum sharedExpBits = 0;
    enum depthBits = 0;
    enum stencilBits = 0;

    import std.meta : AliasSeq;
    alias numFormats = AliasSeq!(
        NumFormat.uNorm, NumFormat.sNorm, NumFormat.uScaled, NumFormat.sScaled, NumFormat.uInt, NumFormat.sInt, NumFormat.sRgb
    );
}

/// Static descriptor of SurfaceType.A2_R10_G10_B10.
struct A2_R10_G10_B10
{
    enum totalBits = 32;
    enum numComponents = 4;
    enum redBits = 10;
    enum greenBits = 10;
    enum blueBits = 10;
    enum alphaBits = 2;
    enum sharedExpBits = 0;
    enum depthBits = 0;
    enum stencilBits = 0;

    import std.meta : AliasSeq;
    alias numFormats = AliasSeq!(
        NumFormat.uNorm, NumFormat.sNorm, NumFormat.uScaled, NumFormat.sScaled, NumFormat.uInt, NumFormat.sInt
    );
}

/// Static descriptor of SurfaceType.A2_B10_G10_R10.
struct A2_B10_G10_R10
{
    enum totalBits = 32;
    enum numComponents = 4;
    enum redBits = 10;
    enum greenBits = 10;
    enum blueBits = 10;
    enum alphaBits = 2;
    enum sharedExpBits = 0;
    enum depthBits = 0;
    enum stencilBits = 0;

    import std.meta : AliasSeq;
    alias numFormats = AliasSeq!(
        NumFormat.uNorm, NumFormat.sNorm, NumFormat.uScaled, NumFormat.sScaled, NumFormat.uInt, NumFormat.sInt
    );
}

/// Static descriptor of SurfaceType.R16.
struct R16
{
    enum totalBits = 16;
    enum numComponents = 1;
    enum redBits = 16;
    enum greenBits = 0;
    enum blueBits = 0;
    enum alphaBits = 0;
    enum sharedExpBits = 0;
    enum depthBits = 0;
    enum stencilBits = 0;

    import std.meta : AliasSeq;
    alias numFormats = AliasSeq!(
        NumFormat.uNorm, NumFormat.sNorm, NumFormat.uScaled, NumFormat.sScaled, NumFormat.uInt, NumFormat.sInt, NumFormat.sFloat
    );
}

/// Static descriptor of SurfaceType.R16_G16.
struct R16_G16
{
    enum totalBits = 32;
    enum numComponents = 2;
    enum redBits = 16;
    enum greenBits = 16;
    enum blueBits = 0;
    enum alphaBits = 0;
    enum sharedExpBits = 0;
    enum depthBits = 0;
    enum stencilBits = 0;

    import std.meta : AliasSeq;
    alias numFormats = AliasSeq!(
        NumFormat.uNorm, NumFormat.sNorm, NumFormat.uScaled, NumFormat.sScaled, NumFormat.uInt, NumFormat.sInt, NumFormat.sFloat
    );
}

/// Static descriptor of SurfaceType.R16_G16_B16.
struct R16_G16_B16
{
    enum totalBits = 48;
    enum numComponents = 3;
    enum redBits = 16;
    enum greenBits = 16;
    enum blueBits = 16;
    enum alphaBits = 0;
    enum sharedExpBits = 0;
    enum depthBits = 0;
    enum stencilBits = 0;

    import std.meta : AliasSeq;
    alias numFormats = AliasSeq!(
        NumFormat.uNorm, NumFormat.sNorm, NumFormat.uScaled, NumFormat.sScaled, NumFormat.uInt, NumFormat.sInt, NumFormat.sFloat
    );
}

/// Static descriptor of SurfaceType.R16_G16_B16_A16.
struct R16_G16_B16_A16
{
    enum totalBits = 64;
    enum numComponents = 4;
    enum redBits = 16;
    enum greenBits = 16;
    enum blueBits = 16;
    enum alphaBits = 16;
    enum sharedExpBits = 0;
    enum depthBits = 0;
    enum stencilBits = 0;

    import std.meta : AliasSeq;
    alias numFormats = AliasSeq!(
        NumFormat.uNorm, NumFormat.sNorm, NumFormat.uScaled, NumFormat.sScaled, NumFormat.uInt, NumFormat.sInt, NumFormat.sFloat
    );
}

/// Static descriptor of SurfaceType.R32.
struct R32
{
    enum totalBits = 32;
    enum numComponents = 1;
    enum redBits = 32;
    enum greenBits = 0;
    enum blueBits = 0;
    enum alphaBits = 0;
    enum sharedExpBits = 0;
    enum depthBits = 0;
    enum stencilBits = 0;

    import std.meta : AliasSeq;
    alias numFormats = AliasSeq!(
        NumFormat.uInt, NumFormat.sInt, NumFormat.sFloat
    );
}

/// Static descriptor of SurfaceType.R32_G32.
struct R32_G32
{
    enum totalBits = 64;
    enum numComponents = 2;
    enum redBits = 32;
    enum greenBits = 32;
    enum blueBits = 0;
    enum alphaBits = 0;
    enum sharedExpBits = 0;
    enum depthBits = 0;
    enum stencilBits = 0;

    import std.meta : AliasSeq;
    alias numFormats = AliasSeq!(
        NumFormat.uInt, NumFormat.sInt, NumFormat.sFloat
    );
}

/// Static descriptor of SurfaceType.R32_G32_B32.
struct R32_G32_B32
{
    enum totalBits = 96;
    enum numComponents = 3;
    enum redBits = 32;
    enum greenBits = 32;
    enum blueBits = 32;
    enum alphaBits = 0;
    enum sharedExpBits = 0;
    enum depthBits = 0;
    enum stencilBits = 0;

    import std.meta : AliasSeq;
    alias numFormats = AliasSeq!(
        NumFormat.uInt, NumFormat.sInt, NumFormat.sFloat
    );
}

/// Static descriptor of SurfaceType.R32_G32_B32_A32.
struct R32_G32_B32_A32
{
    enum totalBits = 128;
    enum numComponents = 4;
    enum redBits = 32;
    enum greenBits = 32;
    enum blueBits = 32;
    enum alphaBits = 32;
    enum sharedExpBits = 0;
    enum depthBits = 0;
    enum stencilBits = 0;

    import std.meta : AliasSeq;
    alias numFormats = AliasSeq!(
        NumFormat.uInt, NumFormat.sInt, NumFormat.sFloat
    );
}

/// Static descriptor of SurfaceType.R64.
struct R64
{
    enum totalBits = 64;
    enum numComponents = 1;
    enum redBits = 64;
    enum greenBits = 0;
    enum blueBits = 0;
    enum alphaBits = 0;
    enum sharedExpBits = 0;
    enum depthBits = 0;
    enum stencilBits = 0;

    import std.meta : AliasSeq;
    alias numFormats = AliasSeq!(
        NumFormat.uInt, NumFormat.sInt, NumFormat.sFloat
    );
}

/// Static descriptor of SurfaceType.R64_G64.
struct R64_G64
{
    enum totalBits = 128;
    enum numComponents = 2;
    enum redBits = 64;
    enum greenBits = 64;
    enum blueBits = 0;
    enum alphaBits = 0;
    enum sharedExpBits = 0;
    enum depthBits = 0;
    enum stencilBits = 0;

    import std.meta : AliasSeq;
    alias numFormats = AliasSeq!(
        NumFormat.uInt, NumFormat.sInt, NumFormat.sFloat
    );
}

/// Static descriptor of SurfaceType.R64_G64_B64.
struct R64_G64_B64
{
    enum totalBits = 192;
    enum numComponents = 3;
    enum redBits = 64;
    enum greenBits = 64;
    enum blueBits = 64;
    enum alphaBits = 0;
    enum sharedExpBits = 0;
    enum depthBits = 0;
    enum stencilBits = 0;

    import std.meta : AliasSeq;
    alias numFormats = AliasSeq!(
        NumFormat.uInt, NumFormat.sInt, NumFormat.sFloat
    );
}

/// Static descriptor of SurfaceType.R64_G64_B64_A64.
struct R64_G64_B64_A64
{
    enum totalBits = 256;
    enum numComponents = 4;
    enum redBits = 64;
    enum greenBits = 64;
    enum blueBits = 64;
    enum alphaBits = 64;
    enum sharedExpBits = 0;
    enum depthBits = 0;
    enum stencilBits = 0;

    import std.meta : AliasSeq;
    alias numFormats = AliasSeq!(
        NumFormat.uInt, NumFormat.sInt, NumFormat.sFloat
    );
}

/// Static descriptor of SurfaceType.B10_G11_R11.
struct B10_G11_R11
{
    enum totalBits = 32;
    enum numComponents = 3;
    enum redBits = 11;
    enum greenBits = 11;
    enum blueBits = 10;
    enum alphaBits = 0;
    enum sharedExpBits = 0;
    enum depthBits = 0;
    enum stencilBits = 0;

    import std.meta : AliasSeq;
    alias numFormats = AliasSeq!(
        NumFormat.uFloat
    );
}

/// Static descriptor of SurfaceType.E5_B9_G9_R9.
struct E5_B9_G9_R9
{
    enum totalBits = 32;
    enum numComponents = 4;
    enum redBits = 9;
    enum greenBits = 9;
    enum blueBits = 9;
    enum alphaBits = 0;
    enum sharedExpBits = 5;
    enum depthBits = 0;
    enum stencilBits = 0;

    import std.meta : AliasSeq;
    alias numFormats = AliasSeq!(
        NumFormat.uFloat
    );
}

/// Static descriptor of SurfaceType.D16.
struct D16
{
    enum totalBits = 16;
    enum numComponents = 1;
    enum redBits = 0;
    enum greenBits = 0;
    enum blueBits = 0;
    enum alphaBits = 0;
    enum sharedExpBits = 0;
    enum depthBits = 16;
    enum stencilBits = 0;

    import std.meta : AliasSeq;
    alias numFormats = AliasSeq!(
        NumFormat.uNorm
    );
}

/// Static descriptor of SurfaceType.X8_D24.
struct X8_D24
{
    enum totalBits = 32;
    enum numComponents = 2;
    enum redBits = 0;
    enum greenBits = 0;
    enum blueBits = 0;
    enum alphaBits = 0;
    enum sharedExpBits = 0;
    enum depthBits = 24;
    enum stencilBits = 0;

    import std.meta : AliasSeq;
    alias numFormats = AliasSeq!(
        NumFormat.uNorm
    );
}

/// Static descriptor of SurfaceType.D32.
struct D32
{
    enum totalBits = 32;
    enum numComponents = 1;
    enum redBits = 0;
    enum greenBits = 0;
    enum blueBits = 0;
    enum alphaBits = 0;
    enum sharedExpBits = 0;
    enum depthBits = 32;
    enum stencilBits = 0;

    import std.meta : AliasSeq;
    alias numFormats = AliasSeq!(
        NumFormat.sFloat
    );
}

/// Static descriptor of SurfaceType.S8.
struct S8
{
    enum totalBits = 8;
    enum numComponents = 1;
    enum redBits = 0;
    enum greenBits = 0;
    enum blueBits = 0;
    enum alphaBits = 0;
    enum sharedExpBits = 0;
    enum depthBits = 0;
    enum stencilBits = 8;

    import std.meta : AliasSeq;
    alias numFormats = AliasSeq!(
        NumFormat.uInt
    );
}

/// Static descriptor of SurfaceType.D16_S8.
struct D16_S8
{
    enum totalBits = 24;
    enum numComponents = 2;
    enum redBits = 0;
    enum greenBits = 0;
    enum blueBits = 0;
    enum alphaBits = 0;
    enum sharedExpBits = 0;
    enum depthBits = 16;
    enum stencilBits = 8;

    import std.meta : AliasSeq;
    alias numFormats = AliasSeq!(
        NumFormat.uNorm
    );
}

/// Static descriptor of SurfaceType.D24_S8.
struct D24_S8
{
    enum totalBits = 32;
    enum numComponents = 2;
    enum redBits = 0;
    enum greenBits = 0;
    enum blueBits = 0;
    enum alphaBits = 0;
    enum sharedExpBits = 0;
    enum depthBits = 24;
    enum stencilBits = 8;

    import std.meta : AliasSeq;
    alias numFormats = AliasSeq!(
        NumFormat.uNorm
    );
}

/// Static descriptor of SurfaceType.D32_S8.
struct D32_S8
{
    enum totalBits = 40;
    enum numComponents = 2;
    enum redBits = 0;
    enum greenBits = 0;
    enum blueBits = 0;
    enum alphaBits = 0;
    enum sharedExpBits = 0;
    enum depthBits = 32;
    enum stencilBits = 8;

    import std.meta : AliasSeq;
    alias numFormats = AliasSeq!(
        NumFormat.sFloat
    );
}

/// Static descriptor of Format.rg4_uNorm
struct Rg4_uNorm
{
    alias SurfType = R4_G4;
    enum surfType = SurfaceType.R4_G4;
    enum numFormat = NumFormat.uNorm;
    enum packed = true;
}

/// Static descriptor of Format.rgba4_uNorm
struct Rgba4_uNorm
{
    alias SurfType = R4_G4_B4_A4;
    enum surfType = SurfaceType.R4_G4_B4_A4;
    enum numFormat = NumFormat.uNorm;
    enum packed = true;
}

/// Static descriptor of Format.bgra4_uNorm
struct Bgra4_uNorm
{
    alias SurfType = B4_G4_R4_A4;
    enum surfType = SurfaceType.B4_G4_R4_A4;
    enum numFormat = NumFormat.uNorm;
    enum packed = true;
}

/// Static descriptor of Format.r5g6b5_uNorm
struct R5g6b5_uNorm
{
    alias SurfType = R5_G6_B5;
    enum surfType = SurfaceType.R5_G6_B5;
    enum numFormat = NumFormat.uNorm;
    enum packed = true;
}

/// Static descriptor of Format.b5g6r5_uNorm
struct B5g6r5_uNorm
{
    alias SurfType = B5_G6_R5;
    enum surfType = SurfaceType.B5_G6_R5;
    enum numFormat = NumFormat.uNorm;
    enum packed = true;
}

/// Static descriptor of Format.r5g5b5a1_uNorm
struct R5g5b5a1_uNorm
{
    alias SurfType = R5_G5_B5_A1;
    enum surfType = SurfaceType.R5_G5_B5_A1;
    enum numFormat = NumFormat.uNorm;
    enum packed = true;
}

/// Static descriptor of Format.b5g5r5a1_uNorm
struct B5g5r5a1_uNorm
{
    alias SurfType = B5_G5_R5_A1;
    enum surfType = SurfaceType.B5_G5_R5_A1;
    enum numFormat = NumFormat.uNorm;
    enum packed = true;
}

/// Static descriptor of Format.a1r5g5b5_uNorm
struct A1r5g5b5_uNorm
{
    alias SurfType = A1_R5_G5_B5;
    enum surfType = SurfaceType.A1_R5_G5_B5;
    enum numFormat = NumFormat.uNorm;
    enum packed = true;
}

/// Static descriptor of Format.r8_uNorm
struct R8_uNorm
{
    alias SurfType = R8;
    enum surfType = SurfaceType.R8;
    enum numFormat = NumFormat.uNorm;
    enum packed = false;
}

/// Static descriptor of Format.r8_sNorm
struct R8_sNorm
{
    alias SurfType = R8;
    enum surfType = SurfaceType.R8;
    enum numFormat = NumFormat.sNorm;
    enum packed = false;
}

/// Static descriptor of Format.r8_uScaled
struct R8_uScaled
{
    alias SurfType = R8;
    enum surfType = SurfaceType.R8;
    enum numFormat = NumFormat.uScaled;
    enum packed = false;
}

/// Static descriptor of Format.r8_sScaled
struct R8_sScaled
{
    alias SurfType = R8;
    enum surfType = SurfaceType.R8;
    enum numFormat = NumFormat.sScaled;
    enum packed = false;
}

/// Static descriptor of Format.r8_uInt
struct R8_uInt
{
    alias SurfType = R8;
    enum surfType = SurfaceType.R8;
    enum numFormat = NumFormat.uInt;
    enum packed = false;
}

/// Static descriptor of Format.r8_sInt
struct R8_sInt
{
    alias SurfType = R8;
    enum surfType = SurfaceType.R8;
    enum numFormat = NumFormat.sInt;
    enum packed = false;
}

/// Static descriptor of Format.r8_sRgb
struct R8_sRgb
{
    alias SurfType = R8;
    enum surfType = SurfaceType.R8;
    enum numFormat = NumFormat.sRgb;
    enum packed = false;
}

/// Static descriptor of Format.rg8_uNorm
struct Rg8_uNorm
{
    alias SurfType = R8_G8;
    enum surfType = SurfaceType.R8_G8;
    enum numFormat = NumFormat.uNorm;
    enum packed = false;
}

/// Static descriptor of Format.rg8_sNorm
struct Rg8_sNorm
{
    alias SurfType = R8_G8;
    enum surfType = SurfaceType.R8_G8;
    enum numFormat = NumFormat.sNorm;
    enum packed = false;
}

/// Static descriptor of Format.rg8_uScaled
struct Rg8_uScaled
{
    alias SurfType = R8_G8;
    enum surfType = SurfaceType.R8_G8;
    enum numFormat = NumFormat.uScaled;
    enum packed = false;
}

/// Static descriptor of Format.rg8_sScaled
struct Rg8_sScaled
{
    alias SurfType = R8_G8;
    enum surfType = SurfaceType.R8_G8;
    enum numFormat = NumFormat.sScaled;
    enum packed = false;
}

/// Static descriptor of Format.rg8_uInt
struct Rg8_uInt
{
    alias SurfType = R8_G8;
    enum surfType = SurfaceType.R8_G8;
    enum numFormat = NumFormat.uInt;
    enum packed = false;
}

/// Static descriptor of Format.rg8_sInt
struct Rg8_sInt
{
    alias SurfType = R8_G8;
    enum surfType = SurfaceType.R8_G8;
    enum numFormat = NumFormat.sInt;
    enum packed = false;
}

/// Static descriptor of Format.rg8_sRgb
struct Rg8_sRgb
{
    alias SurfType = R8_G8;
    enum surfType = SurfaceType.R8_G8;
    enum numFormat = NumFormat.sRgb;
    enum packed = false;
}

/// Static descriptor of Format.rgb8_uNorm
struct Rgb8_uNorm
{
    alias SurfType = R8_G8_B8;
    enum surfType = SurfaceType.R8_G8_B8;
    enum numFormat = NumFormat.uNorm;
    enum packed = false;
}

/// Static descriptor of Format.rgb8_sNorm
struct Rgb8_sNorm
{
    alias SurfType = R8_G8_B8;
    enum surfType = SurfaceType.R8_G8_B8;
    enum numFormat = NumFormat.sNorm;
    enum packed = false;
}

/// Static descriptor of Format.rgb8_uScaled
struct Rgb8_uScaled
{
    alias SurfType = R8_G8_B8;
    enum surfType = SurfaceType.R8_G8_B8;
    enum numFormat = NumFormat.uScaled;
    enum packed = false;
}

/// Static descriptor of Format.rgb8_sScaled
struct Rgb8_sScaled
{
    alias SurfType = R8_G8_B8;
    enum surfType = SurfaceType.R8_G8_B8;
    enum numFormat = NumFormat.sScaled;
    enum packed = false;
}

/// Static descriptor of Format.rgb8_uInt
struct Rgb8_uInt
{
    alias SurfType = R8_G8_B8;
    enum surfType = SurfaceType.R8_G8_B8;
    enum numFormat = NumFormat.uInt;
    enum packed = false;
}

/// Static descriptor of Format.rgb8_sInt
struct Rgb8_sInt
{
    alias SurfType = R8_G8_B8;
    enum surfType = SurfaceType.R8_G8_B8;
    enum numFormat = NumFormat.sInt;
    enum packed = false;
}

/// Static descriptor of Format.rgb8_sRgb
struct Rgb8_sRgb
{
    alias SurfType = R8_G8_B8;
    enum surfType = SurfaceType.R8_G8_B8;
    enum numFormat = NumFormat.sRgb;
    enum packed = false;
}

/// Static descriptor of Format.bgr8_uNorm
struct Bgr8_uNorm
{
    alias SurfType = B8_G8_R8;
    enum surfType = SurfaceType.B8_G8_R8;
    enum numFormat = NumFormat.uNorm;
    enum packed = false;
}

/// Static descriptor of Format.bgr8_sNorm
struct Bgr8_sNorm
{
    alias SurfType = B8_G8_R8;
    enum surfType = SurfaceType.B8_G8_R8;
    enum numFormat = NumFormat.sNorm;
    enum packed = false;
}

/// Static descriptor of Format.bgr8_uScaled
struct Bgr8_uScaled
{
    alias SurfType = B8_G8_R8;
    enum surfType = SurfaceType.B8_G8_R8;
    enum numFormat = NumFormat.uScaled;
    enum packed = false;
}

/// Static descriptor of Format.bgr8_sScaled
struct Bgr8_sScaled
{
    alias SurfType = B8_G8_R8;
    enum surfType = SurfaceType.B8_G8_R8;
    enum numFormat = NumFormat.sScaled;
    enum packed = false;
}

/// Static descriptor of Format.bgr8_uInt
struct Bgr8_uInt
{
    alias SurfType = B8_G8_R8;
    enum surfType = SurfaceType.B8_G8_R8;
    enum numFormat = NumFormat.uInt;
    enum packed = false;
}

/// Static descriptor of Format.bgr8_sInt
struct Bgr8_sInt
{
    alias SurfType = B8_G8_R8;
    enum surfType = SurfaceType.B8_G8_R8;
    enum numFormat = NumFormat.sInt;
    enum packed = false;
}

/// Static descriptor of Format.bgr8_sRgb
struct Bgr8_sRgb
{
    alias SurfType = B8_G8_R8;
    enum surfType = SurfaceType.B8_G8_R8;
    enum numFormat = NumFormat.sRgb;
    enum packed = false;
}

/// Static descriptor of Format.rgba8_uNorm
struct Rgba8_uNorm
{
    alias SurfType = R8_G8_B8_A8;
    enum surfType = SurfaceType.R8_G8_B8_A8;
    enum numFormat = NumFormat.uNorm;
    enum packed = false;
}

/// Static descriptor of Format.rgba8_sNorm
struct Rgba8_sNorm
{
    alias SurfType = R8_G8_B8_A8;
    enum surfType = SurfaceType.R8_G8_B8_A8;
    enum numFormat = NumFormat.sNorm;
    enum packed = false;
}

/// Static descriptor of Format.rgba8_uScaled
struct Rgba8_uScaled
{
    alias SurfType = R8_G8_B8_A8;
    enum surfType = SurfaceType.R8_G8_B8_A8;
    enum numFormat = NumFormat.uScaled;
    enum packed = false;
}

/// Static descriptor of Format.rgba8_sScaled
struct Rgba8_sScaled
{
    alias SurfType = R8_G8_B8_A8;
    enum surfType = SurfaceType.R8_G8_B8_A8;
    enum numFormat = NumFormat.sScaled;
    enum packed = false;
}

/// Static descriptor of Format.rgba8_uInt
struct Rgba8_uInt
{
    alias SurfType = R8_G8_B8_A8;
    enum surfType = SurfaceType.R8_G8_B8_A8;
    enum numFormat = NumFormat.uInt;
    enum packed = false;
}

/// Static descriptor of Format.rgba8_sInt
struct Rgba8_sInt
{
    alias SurfType = R8_G8_B8_A8;
    enum surfType = SurfaceType.R8_G8_B8_A8;
    enum numFormat = NumFormat.sInt;
    enum packed = false;
}

/// Static descriptor of Format.rgba8_sRgb
struct Rgba8_sRgb
{
    alias SurfType = R8_G8_B8_A8;
    enum surfType = SurfaceType.R8_G8_B8_A8;
    enum numFormat = NumFormat.sRgb;
    enum packed = false;
}

/// Static descriptor of Format.bgra8_uNorm
struct Bgra8_uNorm
{
    alias SurfType = B8_G8_R8_A8;
    enum surfType = SurfaceType.B8_G8_R8_A8;
    enum numFormat = NumFormat.uNorm;
    enum packed = false;
}

/// Static descriptor of Format.bgra8_sNorm
struct Bgra8_sNorm
{
    alias SurfType = B8_G8_R8_A8;
    enum surfType = SurfaceType.B8_G8_R8_A8;
    enum numFormat = NumFormat.sNorm;
    enum packed = false;
}

/// Static descriptor of Format.bgra8_uScaled
struct Bgra8_uScaled
{
    alias SurfType = B8_G8_R8_A8;
    enum surfType = SurfaceType.B8_G8_R8_A8;
    enum numFormat = NumFormat.uScaled;
    enum packed = false;
}

/// Static descriptor of Format.bgra8_sScaled
struct Bgra8_sScaled
{
    alias SurfType = B8_G8_R8_A8;
    enum surfType = SurfaceType.B8_G8_R8_A8;
    enum numFormat = NumFormat.sScaled;
    enum packed = false;
}

/// Static descriptor of Format.bgra8_uInt
struct Bgra8_uInt
{
    alias SurfType = B8_G8_R8_A8;
    enum surfType = SurfaceType.B8_G8_R8_A8;
    enum numFormat = NumFormat.uInt;
    enum packed = false;
}

/// Static descriptor of Format.bgra8_sInt
struct Bgra8_sInt
{
    alias SurfType = B8_G8_R8_A8;
    enum surfType = SurfaceType.B8_G8_R8_A8;
    enum numFormat = NumFormat.sInt;
    enum packed = false;
}

/// Static descriptor of Format.bgra8_sRgb
struct Bgra8_sRgb
{
    alias SurfType = B8_G8_R8_A8;
    enum surfType = SurfaceType.B8_G8_R8_A8;
    enum numFormat = NumFormat.sRgb;
    enum packed = false;
}

/// Static descriptor of Format.abgr8_uNorm
struct Abgr8_uNorm
{
    alias SurfType = A8_B8_G8_R8;
    enum surfType = SurfaceType.A8_B8_G8_R8;
    enum numFormat = NumFormat.uNorm;
    enum packed = true;
}

/// Static descriptor of Format.abgr8_sNorm
struct Abgr8_sNorm
{
    alias SurfType = A8_B8_G8_R8;
    enum surfType = SurfaceType.A8_B8_G8_R8;
    enum numFormat = NumFormat.sNorm;
    enum packed = true;
}

/// Static descriptor of Format.abgr8_uScaled
struct Abgr8_uScaled
{
    alias SurfType = A8_B8_G8_R8;
    enum surfType = SurfaceType.A8_B8_G8_R8;
    enum numFormat = NumFormat.uScaled;
    enum packed = true;
}

/// Static descriptor of Format.abgr8_sScaled
struct Abgr8_sScaled
{
    alias SurfType = A8_B8_G8_R8;
    enum surfType = SurfaceType.A8_B8_G8_R8;
    enum numFormat = NumFormat.sScaled;
    enum packed = true;
}

/// Static descriptor of Format.abgr8_uInt
struct Abgr8_uInt
{
    alias SurfType = A8_B8_G8_R8;
    enum surfType = SurfaceType.A8_B8_G8_R8;
    enum numFormat = NumFormat.uInt;
    enum packed = true;
}

/// Static descriptor of Format.abgr8_sInt
struct Abgr8_sInt
{
    alias SurfType = A8_B8_G8_R8;
    enum surfType = SurfaceType.A8_B8_G8_R8;
    enum numFormat = NumFormat.sInt;
    enum packed = true;
}

/// Static descriptor of Format.abgr8_sRgb
struct Abgr8_sRgb
{
    alias SurfType = A8_B8_G8_R8;
    enum surfType = SurfaceType.A8_B8_G8_R8;
    enum numFormat = NumFormat.sRgb;
    enum packed = true;
}

/// Static descriptor of Format.a2r10g10b10_uNorm
struct A2r10g10b10_uNorm
{
    alias SurfType = A2_R10_G10_B10;
    enum surfType = SurfaceType.A2_R10_G10_B10;
    enum numFormat = NumFormat.uNorm;
    enum packed = true;
}

/// Static descriptor of Format.a2r10g10b10_sNorm
struct A2r10g10b10_sNorm
{
    alias SurfType = A2_R10_G10_B10;
    enum surfType = SurfaceType.A2_R10_G10_B10;
    enum numFormat = NumFormat.sNorm;
    enum packed = true;
}

/// Static descriptor of Format.a2r10g10b10_uScaled
struct A2r10g10b10_uScaled
{
    alias SurfType = A2_R10_G10_B10;
    enum surfType = SurfaceType.A2_R10_G10_B10;
    enum numFormat = NumFormat.uScaled;
    enum packed = true;
}

/// Static descriptor of Format.a2r10g10b10_sScaled
struct A2r10g10b10_sScaled
{
    alias SurfType = A2_R10_G10_B10;
    enum surfType = SurfaceType.A2_R10_G10_B10;
    enum numFormat = NumFormat.sScaled;
    enum packed = true;
}

/// Static descriptor of Format.a2r10g10b10_uInt
struct A2r10g10b10_uInt
{
    alias SurfType = A2_R10_G10_B10;
    enum surfType = SurfaceType.A2_R10_G10_B10;
    enum numFormat = NumFormat.uInt;
    enum packed = true;
}

/// Static descriptor of Format.a2r10g10b10_sInt
struct A2r10g10b10_sInt
{
    alias SurfType = A2_R10_G10_B10;
    enum surfType = SurfaceType.A2_R10_G10_B10;
    enum numFormat = NumFormat.sInt;
    enum packed = true;
}

/// Static descriptor of Format.a2b10g10r10_uNorm
struct A2b10g10r10_uNorm
{
    alias SurfType = A2_B10_G10_R10;
    enum surfType = SurfaceType.A2_B10_G10_R10;
    enum numFormat = NumFormat.uNorm;
    enum packed = true;
}

/// Static descriptor of Format.a2b10g10r10_sNorm
struct A2b10g10r10_sNorm
{
    alias SurfType = A2_B10_G10_R10;
    enum surfType = SurfaceType.A2_B10_G10_R10;
    enum numFormat = NumFormat.sNorm;
    enum packed = true;
}

/// Static descriptor of Format.a2b10g10r10_uScaled
struct A2b10g10r10_uScaled
{
    alias SurfType = A2_B10_G10_R10;
    enum surfType = SurfaceType.A2_B10_G10_R10;
    enum numFormat = NumFormat.uScaled;
    enum packed = true;
}

/// Static descriptor of Format.a2b10g10r10_sScaled
struct A2b10g10r10_sScaled
{
    alias SurfType = A2_B10_G10_R10;
    enum surfType = SurfaceType.A2_B10_G10_R10;
    enum numFormat = NumFormat.sScaled;
    enum packed = true;
}

/// Static descriptor of Format.a2b10g10r10_uInt
struct A2b10g10r10_uInt
{
    alias SurfType = A2_B10_G10_R10;
    enum surfType = SurfaceType.A2_B10_G10_R10;
    enum numFormat = NumFormat.uInt;
    enum packed = true;
}

/// Static descriptor of Format.a2b10g10r10_sInt
struct A2b10g10r10_sInt
{
    alias SurfType = A2_B10_G10_R10;
    enum surfType = SurfaceType.A2_B10_G10_R10;
    enum numFormat = NumFormat.sInt;
    enum packed = true;
}

/// Static descriptor of Format.r16_uNorm
struct R16_uNorm
{
    alias SurfType = R16;
    enum surfType = SurfaceType.R16;
    enum numFormat = NumFormat.uNorm;
    enum packed = false;
}

/// Static descriptor of Format.r16_sNorm
struct R16_sNorm
{
    alias SurfType = R16;
    enum surfType = SurfaceType.R16;
    enum numFormat = NumFormat.sNorm;
    enum packed = false;
}

/// Static descriptor of Format.r16_uScaled
struct R16_uScaled
{
    alias SurfType = R16;
    enum surfType = SurfaceType.R16;
    enum numFormat = NumFormat.uScaled;
    enum packed = false;
}

/// Static descriptor of Format.r16_sScaled
struct R16_sScaled
{
    alias SurfType = R16;
    enum surfType = SurfaceType.R16;
    enum numFormat = NumFormat.sScaled;
    enum packed = false;
}

/// Static descriptor of Format.r16_uInt
struct R16_uInt
{
    alias SurfType = R16;
    enum surfType = SurfaceType.R16;
    enum numFormat = NumFormat.uInt;
    enum packed = false;
}

/// Static descriptor of Format.r16_sInt
struct R16_sInt
{
    alias SurfType = R16;
    enum surfType = SurfaceType.R16;
    enum numFormat = NumFormat.sInt;
    enum packed = false;
}

/// Static descriptor of Format.r16_sFloat
struct R16_sFloat
{
    alias SurfType = R16;
    enum surfType = SurfaceType.R16;
    enum numFormat = NumFormat.sFloat;
    enum packed = false;
}

/// Static descriptor of Format.rg16_uNorm
struct Rg16_uNorm
{
    alias SurfType = R16_G16;
    enum surfType = SurfaceType.R16_G16;
    enum numFormat = NumFormat.uNorm;
    enum packed = false;
}

/// Static descriptor of Format.rg16_sNorm
struct Rg16_sNorm
{
    alias SurfType = R16_G16;
    enum surfType = SurfaceType.R16_G16;
    enum numFormat = NumFormat.sNorm;
    enum packed = false;
}

/// Static descriptor of Format.rg16_uScaled
struct Rg16_uScaled
{
    alias SurfType = R16_G16;
    enum surfType = SurfaceType.R16_G16;
    enum numFormat = NumFormat.uScaled;
    enum packed = false;
}

/// Static descriptor of Format.rg16_sScaled
struct Rg16_sScaled
{
    alias SurfType = R16_G16;
    enum surfType = SurfaceType.R16_G16;
    enum numFormat = NumFormat.sScaled;
    enum packed = false;
}

/// Static descriptor of Format.rg16_uInt
struct Rg16_uInt
{
    alias SurfType = R16_G16;
    enum surfType = SurfaceType.R16_G16;
    enum numFormat = NumFormat.uInt;
    enum packed = false;
}

/// Static descriptor of Format.rg16_sInt
struct Rg16_sInt
{
    alias SurfType = R16_G16;
    enum surfType = SurfaceType.R16_G16;
    enum numFormat = NumFormat.sInt;
    enum packed = false;
}

/// Static descriptor of Format.rg16_sFloat
struct Rg16_sFloat
{
    alias SurfType = R16_G16;
    enum surfType = SurfaceType.R16_G16;
    enum numFormat = NumFormat.sFloat;
    enum packed = false;
}

/// Static descriptor of Format.rgb16_uNorm
struct Rgb16_uNorm
{
    alias SurfType = R16_G16_B16;
    enum surfType = SurfaceType.R16_G16_B16;
    enum numFormat = NumFormat.uNorm;
    enum packed = false;
}

/// Static descriptor of Format.rgb16_sNorm
struct Rgb16_sNorm
{
    alias SurfType = R16_G16_B16;
    enum surfType = SurfaceType.R16_G16_B16;
    enum numFormat = NumFormat.sNorm;
    enum packed = false;
}

/// Static descriptor of Format.rgb16_uScaled
struct Rgb16_uScaled
{
    alias SurfType = R16_G16_B16;
    enum surfType = SurfaceType.R16_G16_B16;
    enum numFormat = NumFormat.uScaled;
    enum packed = false;
}

/// Static descriptor of Format.rgb16_sScaled
struct Rgb16_sScaled
{
    alias SurfType = R16_G16_B16;
    enum surfType = SurfaceType.R16_G16_B16;
    enum numFormat = NumFormat.sScaled;
    enum packed = false;
}

/// Static descriptor of Format.rgb16_uInt
struct Rgb16_uInt
{
    alias SurfType = R16_G16_B16;
    enum surfType = SurfaceType.R16_G16_B16;
    enum numFormat = NumFormat.uInt;
    enum packed = false;
}

/// Static descriptor of Format.rgb16_sInt
struct Rgb16_sInt
{
    alias SurfType = R16_G16_B16;
    enum surfType = SurfaceType.R16_G16_B16;
    enum numFormat = NumFormat.sInt;
    enum packed = false;
}

/// Static descriptor of Format.rgb16_sFloat
struct Rgb16_sFloat
{
    alias SurfType = R16_G16_B16;
    enum surfType = SurfaceType.R16_G16_B16;
    enum numFormat = NumFormat.sFloat;
    enum packed = false;
}

/// Static descriptor of Format.rgba16_uNorm
struct Rgba16_uNorm
{
    alias SurfType = R16_G16_B16_A16;
    enum surfType = SurfaceType.R16_G16_B16_A16;
    enum numFormat = NumFormat.uNorm;
    enum packed = false;
}

/// Static descriptor of Format.rgba16_sNorm
struct Rgba16_sNorm
{
    alias SurfType = R16_G16_B16_A16;
    enum surfType = SurfaceType.R16_G16_B16_A16;
    enum numFormat = NumFormat.sNorm;
    enum packed = false;
}

/// Static descriptor of Format.rgba16_uScaled
struct Rgba16_uScaled
{
    alias SurfType = R16_G16_B16_A16;
    enum surfType = SurfaceType.R16_G16_B16_A16;
    enum numFormat = NumFormat.uScaled;
    enum packed = false;
}

/// Static descriptor of Format.rgba16_sScaled
struct Rgba16_sScaled
{
    alias SurfType = R16_G16_B16_A16;
    enum surfType = SurfaceType.R16_G16_B16_A16;
    enum numFormat = NumFormat.sScaled;
    enum packed = false;
}

/// Static descriptor of Format.rgba16_uInt
struct Rgba16_uInt
{
    alias SurfType = R16_G16_B16_A16;
    enum surfType = SurfaceType.R16_G16_B16_A16;
    enum numFormat = NumFormat.uInt;
    enum packed = false;
}

/// Static descriptor of Format.rgba16_sInt
struct Rgba16_sInt
{
    alias SurfType = R16_G16_B16_A16;
    enum surfType = SurfaceType.R16_G16_B16_A16;
    enum numFormat = NumFormat.sInt;
    enum packed = false;
}

/// Static descriptor of Format.rgba16_sFloat
struct Rgba16_sFloat
{
    alias SurfType = R16_G16_B16_A16;
    enum surfType = SurfaceType.R16_G16_B16_A16;
    enum numFormat = NumFormat.sFloat;
    enum packed = false;
}

/// Static descriptor of Format.r32_uInt
struct R32_uInt
{
    alias SurfType = R32;
    enum surfType = SurfaceType.R32;
    enum numFormat = NumFormat.uInt;
    enum packed = false;
}

/// Static descriptor of Format.r32_sInt
struct R32_sInt
{
    alias SurfType = R32;
    enum surfType = SurfaceType.R32;
    enum numFormat = NumFormat.sInt;
    enum packed = false;
}

/// Static descriptor of Format.r32_sFloat
struct R32_sFloat
{
    alias SurfType = R32;
    enum surfType = SurfaceType.R32;
    enum numFormat = NumFormat.sFloat;
    enum packed = false;
}

/// Static descriptor of Format.rg32_uInt
struct Rg32_uInt
{
    alias SurfType = R32_G32;
    enum surfType = SurfaceType.R32_G32;
    enum numFormat = NumFormat.uInt;
    enum packed = false;
}

/// Static descriptor of Format.rg32_sInt
struct Rg32_sInt
{
    alias SurfType = R32_G32;
    enum surfType = SurfaceType.R32_G32;
    enum numFormat = NumFormat.sInt;
    enum packed = false;
}

/// Static descriptor of Format.rg32_sFloat
struct Rg32_sFloat
{
    alias SurfType = R32_G32;
    enum surfType = SurfaceType.R32_G32;
    enum numFormat = NumFormat.sFloat;
    enum packed = false;
}

/// Static descriptor of Format.rgb32_uInt
struct Rgb32_uInt
{
    alias SurfType = R32_G32_B32;
    enum surfType = SurfaceType.R32_G32_B32;
    enum numFormat = NumFormat.uInt;
    enum packed = false;
}

/// Static descriptor of Format.rgb32_sInt
struct Rgb32_sInt
{
    alias SurfType = R32_G32_B32;
    enum surfType = SurfaceType.R32_G32_B32;
    enum numFormat = NumFormat.sInt;
    enum packed = false;
}

/// Static descriptor of Format.rgb32_sFloat
struct Rgb32_sFloat
{
    alias SurfType = R32_G32_B32;
    enum surfType = SurfaceType.R32_G32_B32;
    enum numFormat = NumFormat.sFloat;
    enum packed = false;
}

/// Static descriptor of Format.rgba32_uInt
struct Rgba32_uInt
{
    alias SurfType = R32_G32_B32_A32;
    enum surfType = SurfaceType.R32_G32_B32_A32;
    enum numFormat = NumFormat.uInt;
    enum packed = false;
}

/// Static descriptor of Format.rgba32_sInt
struct Rgba32_sInt
{
    alias SurfType = R32_G32_B32_A32;
    enum surfType = SurfaceType.R32_G32_B32_A32;
    enum numFormat = NumFormat.sInt;
    enum packed = false;
}

/// Static descriptor of Format.rgba32_sFloat
struct Rgba32_sFloat
{
    alias SurfType = R32_G32_B32_A32;
    enum surfType = SurfaceType.R32_G32_B32_A32;
    enum numFormat = NumFormat.sFloat;
    enum packed = false;
}

/// Static descriptor of Format.r64_uInt
struct R64_uInt
{
    alias SurfType = R64;
    enum surfType = SurfaceType.R64;
    enum numFormat = NumFormat.uInt;
    enum packed = false;
}

/// Static descriptor of Format.r64_sInt
struct R64_sInt
{
    alias SurfType = R64;
    enum surfType = SurfaceType.R64;
    enum numFormat = NumFormat.sInt;
    enum packed = false;
}

/// Static descriptor of Format.r64_sFloat
struct R64_sFloat
{
    alias SurfType = R64;
    enum surfType = SurfaceType.R64;
    enum numFormat = NumFormat.sFloat;
    enum packed = false;
}

/// Static descriptor of Format.rg64_uInt
struct Rg64_uInt
{
    alias SurfType = R64_G64;
    enum surfType = SurfaceType.R64_G64;
    enum numFormat = NumFormat.uInt;
    enum packed = false;
}

/// Static descriptor of Format.rg64_sInt
struct Rg64_sInt
{
    alias SurfType = R64_G64;
    enum surfType = SurfaceType.R64_G64;
    enum numFormat = NumFormat.sInt;
    enum packed = false;
}

/// Static descriptor of Format.rg64_sFloat
struct Rg64_sFloat
{
    alias SurfType = R64_G64;
    enum surfType = SurfaceType.R64_G64;
    enum numFormat = NumFormat.sFloat;
    enum packed = false;
}

/// Static descriptor of Format.rgb64_uInt
struct Rgb64_uInt
{
    alias SurfType = R64_G64_B64;
    enum surfType = SurfaceType.R64_G64_B64;
    enum numFormat = NumFormat.uInt;
    enum packed = false;
}

/// Static descriptor of Format.rgb64_sInt
struct Rgb64_sInt
{
    alias SurfType = R64_G64_B64;
    enum surfType = SurfaceType.R64_G64_B64;
    enum numFormat = NumFormat.sInt;
    enum packed = false;
}

/// Static descriptor of Format.rgb64_sFloat
struct Rgb64_sFloat
{
    alias SurfType = R64_G64_B64;
    enum surfType = SurfaceType.R64_G64_B64;
    enum numFormat = NumFormat.sFloat;
    enum packed = false;
}

/// Static descriptor of Format.rgba64_uInt
struct Rgba64_uInt
{
    alias SurfType = R64_G64_B64_A64;
    enum surfType = SurfaceType.R64_G64_B64_A64;
    enum numFormat = NumFormat.uInt;
    enum packed = false;
}

/// Static descriptor of Format.rgba64_sInt
struct Rgba64_sInt
{
    alias SurfType = R64_G64_B64_A64;
    enum surfType = SurfaceType.R64_G64_B64_A64;
    enum numFormat = NumFormat.sInt;
    enum packed = false;
}

/// Static descriptor of Format.rgba64_sFloat
struct Rgba64_sFloat
{
    alias SurfType = R64_G64_B64_A64;
    enum surfType = SurfaceType.R64_G64_B64_A64;
    enum numFormat = NumFormat.sFloat;
    enum packed = false;
}

/// Static descriptor of Format.b10g11r11_uFloat
struct B10g11r11_uFloat
{
    alias SurfType = B10_G11_R11;
    enum surfType = SurfaceType.B10_G11_R11;
    enum numFormat = NumFormat.uFloat;
    enum packed = true;
}

/// Static descriptor of Format.ebgr9_uFloat
struct Ebgr9_uFloat
{
    alias SurfType = E5_B9_G9_R9;
    enum surfType = SurfaceType.E5_B9_G9_R9;
    enum numFormat = NumFormat.uFloat;
    enum packed = true;
}

/// Static descriptor of Format.d16_uNorm
struct D16_uNorm
{
    alias SurfType = D16;
    enum surfType = SurfaceType.D16;
    enum numFormat = NumFormat.uNorm;
    enum packed = false;
}

/// Static descriptor of Format.x8d24_uNorm
struct X8d24_uNorm
{
    alias SurfType = X8_D24;
    enum surfType = SurfaceType.X8_D24;
    enum numFormat = NumFormat.uNorm;
    enum packed = true;
}

/// Static descriptor of Format.d32_sFloat
struct D32_sFloat
{
    alias SurfType = D32;
    enum surfType = SurfaceType.D32;
    enum numFormat = NumFormat.sFloat;
    enum packed = false;
}

/// Static descriptor of Format.s8_uInt
struct S8_uInt
{
    alias SurfType = S8;
    enum surfType = SurfaceType.S8;
    enum numFormat = NumFormat.uInt;
    enum packed = false;
}

/// Static descriptor of Format.d16s8_uNorm
struct D16s8_uNorm
{
    alias SurfType = D16_S8;
    enum surfType = SurfaceType.D16_S8;
    enum numFormat = NumFormat.uNorm;
    enum packed = false;
}

/// Static descriptor of Format.d24s8_uNorm
struct D24s8_uNorm
{
    alias SurfType = D24_S8;
    enum surfType = SurfaceType.D24_S8;
    enum numFormat = NumFormat.uNorm;
    enum packed = false;
}

/// Static descriptor of Format.d32s8_sFloat
struct D32s8_sFloat
{
    alias SurfType = D32_S8;
    enum surfType = SurfaceType.D32_S8;
    enum numFormat = NumFormat.sFloat;
    enum packed = false;
}

private immutable(FormatDesc[]) fmtDescs;

shared static this()
{
    import std.exception : assumeUnique;
    fmtDescs = assumeUnique( [
        FormatDesc.init,
        FormatDesc(SurfaceType.R4_G4, NumFormat.uNorm, true),
        FormatDesc(SurfaceType.R4_G4_B4_A4, NumFormat.uNorm, true),
        FormatDesc(SurfaceType.B4_G4_R4_A4, NumFormat.uNorm, true),
        FormatDesc(SurfaceType.R5_G6_B5, NumFormat.uNorm, true),
        FormatDesc(SurfaceType.B5_G6_R5, NumFormat.uNorm, true),
        FormatDesc(SurfaceType.R5_G5_B5_A1, NumFormat.uNorm, true),
        FormatDesc(SurfaceType.B5_G5_R5_A1, NumFormat.uNorm, true),
        FormatDesc(SurfaceType.A1_R5_G5_B5, NumFormat.uNorm, true),
        FormatDesc(SurfaceType.R8, NumFormat.uNorm, false),
        FormatDesc(SurfaceType.R8, NumFormat.sNorm, false),
        FormatDesc(SurfaceType.R8, NumFormat.uScaled, false),
        FormatDesc(SurfaceType.R8, NumFormat.sScaled, false),
        FormatDesc(SurfaceType.R8, NumFormat.uInt, false),
        FormatDesc(SurfaceType.R8, NumFormat.sInt, false),
        FormatDesc(SurfaceType.R8, NumFormat.sRgb, false),
        FormatDesc(SurfaceType.R8_G8, NumFormat.uNorm, false),
        FormatDesc(SurfaceType.R8_G8, NumFormat.sNorm, false),
        FormatDesc(SurfaceType.R8_G8, NumFormat.uScaled, false),
        FormatDesc(SurfaceType.R8_G8, NumFormat.sScaled, false),
        FormatDesc(SurfaceType.R8_G8, NumFormat.uInt, false),
        FormatDesc(SurfaceType.R8_G8, NumFormat.sInt, false),
        FormatDesc(SurfaceType.R8_G8, NumFormat.sRgb, false),
        FormatDesc(SurfaceType.R8_G8_B8, NumFormat.uNorm, false),
        FormatDesc(SurfaceType.R8_G8_B8, NumFormat.sNorm, false),
        FormatDesc(SurfaceType.R8_G8_B8, NumFormat.uScaled, false),
        FormatDesc(SurfaceType.R8_G8_B8, NumFormat.sScaled, false),
        FormatDesc(SurfaceType.R8_G8_B8, NumFormat.uInt, false),
        FormatDesc(SurfaceType.R8_G8_B8, NumFormat.sInt, false),
        FormatDesc(SurfaceType.R8_G8_B8, NumFormat.sRgb, false),
        FormatDesc(SurfaceType.B8_G8_R8, NumFormat.uNorm, false),
        FormatDesc(SurfaceType.B8_G8_R8, NumFormat.sNorm, false),
        FormatDesc(SurfaceType.B8_G8_R8, NumFormat.uScaled, false),
        FormatDesc(SurfaceType.B8_G8_R8, NumFormat.sScaled, false),
        FormatDesc(SurfaceType.B8_G8_R8, NumFormat.uInt, false),
        FormatDesc(SurfaceType.B8_G8_R8, NumFormat.sInt, false),
        FormatDesc(SurfaceType.B8_G8_R8, NumFormat.sRgb, false),
        FormatDesc(SurfaceType.R8_G8_B8_A8, NumFormat.uNorm, false),
        FormatDesc(SurfaceType.R8_G8_B8_A8, NumFormat.sNorm, false),
        FormatDesc(SurfaceType.R8_G8_B8_A8, NumFormat.uScaled, false),
        FormatDesc(SurfaceType.R8_G8_B8_A8, NumFormat.sScaled, false),
        FormatDesc(SurfaceType.R8_G8_B8_A8, NumFormat.uInt, false),
        FormatDesc(SurfaceType.R8_G8_B8_A8, NumFormat.sInt, false),
        FormatDesc(SurfaceType.R8_G8_B8_A8, NumFormat.sRgb, false),
        FormatDesc(SurfaceType.B8_G8_R8_A8, NumFormat.uNorm, false),
        FormatDesc(SurfaceType.B8_G8_R8_A8, NumFormat.sNorm, false),
        FormatDesc(SurfaceType.B8_G8_R8_A8, NumFormat.uScaled, false),
        FormatDesc(SurfaceType.B8_G8_R8_A8, NumFormat.sScaled, false),
        FormatDesc(SurfaceType.B8_G8_R8_A8, NumFormat.uInt, false),
        FormatDesc(SurfaceType.B8_G8_R8_A8, NumFormat.sInt, false),
        FormatDesc(SurfaceType.B8_G8_R8_A8, NumFormat.sRgb, false),
        FormatDesc(SurfaceType.A8_B8_G8_R8, NumFormat.uNorm, true),
        FormatDesc(SurfaceType.A8_B8_G8_R8, NumFormat.sNorm, true),
        FormatDesc(SurfaceType.A8_B8_G8_R8, NumFormat.uScaled, true),
        FormatDesc(SurfaceType.A8_B8_G8_R8, NumFormat.sScaled, true),
        FormatDesc(SurfaceType.A8_B8_G8_R8, NumFormat.uInt, true),
        FormatDesc(SurfaceType.A8_B8_G8_R8, NumFormat.sInt, true),
        FormatDesc(SurfaceType.A8_B8_G8_R8, NumFormat.sRgb, true),
        FormatDesc(SurfaceType.A2_R10_G10_B10, NumFormat.uNorm, true),
        FormatDesc(SurfaceType.A2_R10_G10_B10, NumFormat.sNorm, true),
        FormatDesc(SurfaceType.A2_R10_G10_B10, NumFormat.uScaled, true),
        FormatDesc(SurfaceType.A2_R10_G10_B10, NumFormat.sScaled, true),
        FormatDesc(SurfaceType.A2_R10_G10_B10, NumFormat.uInt, true),
        FormatDesc(SurfaceType.A2_R10_G10_B10, NumFormat.sInt, true),
        FormatDesc(SurfaceType.A2_B10_G10_R10, NumFormat.uNorm, true),
        FormatDesc(SurfaceType.A2_B10_G10_R10, NumFormat.sNorm, true),
        FormatDesc(SurfaceType.A2_B10_G10_R10, NumFormat.uScaled, true),
        FormatDesc(SurfaceType.A2_B10_G10_R10, NumFormat.sScaled, true),
        FormatDesc(SurfaceType.A2_B10_G10_R10, NumFormat.uInt, true),
        FormatDesc(SurfaceType.A2_B10_G10_R10, NumFormat.sInt, true),
        FormatDesc(SurfaceType.R16, NumFormat.uNorm, false),
        FormatDesc(SurfaceType.R16, NumFormat.sNorm, false),
        FormatDesc(SurfaceType.R16, NumFormat.uScaled, false),
        FormatDesc(SurfaceType.R16, NumFormat.sScaled, false),
        FormatDesc(SurfaceType.R16, NumFormat.uInt, false),
        FormatDesc(SurfaceType.R16, NumFormat.sInt, false),
        FormatDesc(SurfaceType.R16, NumFormat.sFloat, false),
        FormatDesc(SurfaceType.R16_G16, NumFormat.uNorm, false),
        FormatDesc(SurfaceType.R16_G16, NumFormat.sNorm, false),
        FormatDesc(SurfaceType.R16_G16, NumFormat.uScaled, false),
        FormatDesc(SurfaceType.R16_G16, NumFormat.sScaled, false),
        FormatDesc(SurfaceType.R16_G16, NumFormat.uInt, false),
        FormatDesc(SurfaceType.R16_G16, NumFormat.sInt, false),
        FormatDesc(SurfaceType.R16_G16, NumFormat.sFloat, false),
        FormatDesc(SurfaceType.R16_G16_B16, NumFormat.uNorm, false),
        FormatDesc(SurfaceType.R16_G16_B16, NumFormat.sNorm, false),
        FormatDesc(SurfaceType.R16_G16_B16, NumFormat.uScaled, false),
        FormatDesc(SurfaceType.R16_G16_B16, NumFormat.sScaled, false),
        FormatDesc(SurfaceType.R16_G16_B16, NumFormat.uInt, false),
        FormatDesc(SurfaceType.R16_G16_B16, NumFormat.sInt, false),
        FormatDesc(SurfaceType.R16_G16_B16, NumFormat.sFloat, false),
        FormatDesc(SurfaceType.R16_G16_B16_A16, NumFormat.uNorm, false),
        FormatDesc(SurfaceType.R16_G16_B16_A16, NumFormat.sNorm, false),
        FormatDesc(SurfaceType.R16_G16_B16_A16, NumFormat.uScaled, false),
        FormatDesc(SurfaceType.R16_G16_B16_A16, NumFormat.sScaled, false),
        FormatDesc(SurfaceType.R16_G16_B16_A16, NumFormat.uInt, false),
        FormatDesc(SurfaceType.R16_G16_B16_A16, NumFormat.sInt, false),
        FormatDesc(SurfaceType.R16_G16_B16_A16, NumFormat.sFloat, false),
        FormatDesc(SurfaceType.R32, NumFormat.uInt, false),
        FormatDesc(SurfaceType.R32, NumFormat.sInt, false),
        FormatDesc(SurfaceType.R32, NumFormat.sFloat, false),
        FormatDesc(SurfaceType.R32_G32, NumFormat.uInt, false),
        FormatDesc(SurfaceType.R32_G32, NumFormat.sInt, false),
        FormatDesc(SurfaceType.R32_G32, NumFormat.sFloat, false),
        FormatDesc(SurfaceType.R32_G32_B32, NumFormat.uInt, false),
        FormatDesc(SurfaceType.R32_G32_B32, NumFormat.sInt, false),
        FormatDesc(SurfaceType.R32_G32_B32, NumFormat.sFloat, false),
        FormatDesc(SurfaceType.R32_G32_B32_A32, NumFormat.uInt, false),
        FormatDesc(SurfaceType.R32_G32_B32_A32, NumFormat.sInt, false),
        FormatDesc(SurfaceType.R32_G32_B32_A32, NumFormat.sFloat, false),
        FormatDesc(SurfaceType.R64, NumFormat.uInt, false),
        FormatDesc(SurfaceType.R64, NumFormat.sInt, false),
        FormatDesc(SurfaceType.R64, NumFormat.sFloat, false),
        FormatDesc(SurfaceType.R64_G64, NumFormat.uInt, false),
        FormatDesc(SurfaceType.R64_G64, NumFormat.sInt, false),
        FormatDesc(SurfaceType.R64_G64, NumFormat.sFloat, false),
        FormatDesc(SurfaceType.R64_G64_B64, NumFormat.uInt, false),
        FormatDesc(SurfaceType.R64_G64_B64, NumFormat.sInt, false),
        FormatDesc(SurfaceType.R64_G64_B64, NumFormat.sFloat, false),
        FormatDesc(SurfaceType.R64_G64_B64_A64, NumFormat.uInt, false),
        FormatDesc(SurfaceType.R64_G64_B64_A64, NumFormat.sInt, false),
        FormatDesc(SurfaceType.R64_G64_B64_A64, NumFormat.sFloat, false),
        FormatDesc(SurfaceType.B10_G11_R11, NumFormat.uFloat, true),
        FormatDesc(SurfaceType.E5_B9_G9_R9, NumFormat.uFloat, true),
        FormatDesc(SurfaceType.D16, NumFormat.uNorm, false),
        FormatDesc(SurfaceType.X8_D24, NumFormat.uNorm, true),
        FormatDesc(SurfaceType.D32, NumFormat.sFloat, false),
        FormatDesc(SurfaceType.S8, NumFormat.uInt, false),
        FormatDesc(SurfaceType.D16_S8, NumFormat.uNorm, false),
        FormatDesc(SurfaceType.D24_S8, NumFormat.uNorm, false),
        FormatDesc(SurfaceType.D32_S8, NumFormat.sFloat, false),
    ] );
}
